{"meta":{"title":"Flow","subtitle":"清简","description":null,"author":"TT","url":"https://antct.github.io/blog","root":"/blog/"},"pages":[{"title":"404 Not Found","date":"2023-08-19T08:28:24.236Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"404.html","permalink":"https://antct.github.io/blog/404.html","excerpt":"","text":"对不起，您所访问的页面不存在或者已删除，**点击此处**返回首页"},{"title":"个人简介","date":"2023-08-19T08:28:24.236Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"about/index.html","permalink":"https://antct.github.io/blog/about/index.html","excerpt":"","text":"关于这个博客的名字，清简，它代表了我对于生活的一些朴素想法。 博客还有一个英文名字，Flow，借这个词希望自己始终能够有所奔向。 在这里， 记录一些我的生活，分享一些我的感受，偶尔，也会整理一些学习的历程。 暂时关闭了实名评论系统，如果有需要的，可以致信QQ邮箱~ 这是我的一些联系方式， GitHub，开源了这个博客的所有代码 FaceBook Wechat RSS"},{"title":"","date":"2023-08-19T08:28:24.268Z","updated":"2023-08-19T08:28:24.268Z","comments":true,"path":"essay/index.html","permalink":"https://antct.github.io/blog/essay/index.html","excerpt":"","text":""},{"title":"","date":"2023-08-19T08:28:24.268Z","updated":"2023-08-19T08:28:24.268Z","comments":true,"path":"gallery/data.json","permalink":"https://antct.github.io/blog/gallery/data.json","excerpt":"","text":"{\"pics\":[{\"url\":\"/blog/assets/gallery/guizhou_20160809_2944.jpg\",\"width\":\"2448\",\"height\":\"3264\"},{\"url\":\"/blog/assets/gallery/wuzhen_20170915_232338.jpg\",\"width\":\"1620\",\"height\":\"1215\"},{\"url\":\"/blog/assets/gallery/xihu_20191208_170336.jpg\",\"width\":\"2736\",\"height\":\"3648\"},{\"url\":\"/blog/assets/gallery/xianju_20170215_3956.jpg\",\"width\":\"1280\",\"height\":\"960\"},{\"url\":\"/blog/assets/gallery/xihu_20191205_164056.jpg\",\"width\":\"2736\",\"height\":\"3648\"},{\"url\":\"/blog/assets/gallery/jiuxi_20191208_170710.jpg\",\"width\":\"2736\",\"height\":\"3648\"},{\"url\":\"/blog/assets/gallery/wuzhen_20170915_5145.jpg\",\"width\":\"1620\",\"height\":\"1215\"},{\"url\":\"/blog/assets/gallery/xihu_20191205_183813.jpg\",\"width\":\"3648\",\"height\":\"2736\"},{\"url\":\"/blog/assets/gallery/xihu_20191205_182242.jpg\",\"width\":\"3648\",\"height\":\"2633\"}]}"},{"title":"","date":"2023-08-19T08:28:24.268Z","updated":"2023-08-19T08:28:24.268Z","comments":true,"path":"gallery/index.html","permalink":"https://antct.github.io/blog/gallery/index.html","excerpt":"","text":""},{"title":"时间轴","date":"2023-08-19T08:28:24.268Z","updated":"2023-08-19T08:28:24.268Z","comments":true,"path":"timeline/index.html","permalink":"https://antct.github.io/blog/timeline/index.html","excerpt":"","text":""}],"posts":[{"title":"python的多继承机制","slug":"python的多继承机制","date":"2019-08-05T16:00:00.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/51808/","link":"","permalink":"https://antct.github.io/blog/posts/51808/","excerpt":"","text":"一些时候可能涉及到多继承模式，这里做一个梳理。一般的逻辑是这样的。一个简单的多继承形式。 如果我们有一个方法F，A和B中都有这个方法，当我们在类C中调用F的时候，我们如何判断这个F来自哪里？ 这里就产生了一个二义性的问题，C中的F，可能是A中的，也可能是B中的。C++中是如何处理这个问题的，C++中借助了虚基类的方法。 Python是如何处理的，干脆，我们就直接定义一个寻找方法的顺序，比如我们就规定当寻找C中的F的时候，先去A中寻找，再去B中寻找。也就是我们的路径是CAB。（图从右向左读）但是如果我们想要一个形如CBA的路径该怎么办，只需要将上述关于类C的定义改写成class C(B, A)即可了。 实际上这个路径就是MRO，Method Resolution Order，即方法解析顺序。形象一点说，就是当我们需要寻求某个属性，某个方法的时候，MRO就是我们的地图，我们按照MRO给我们提供的路径一直找，直到找到为止。 这样似乎就解决了二义性的问题，但是我们又遇到了麻烦，如何去确定这个寻找的路径呢？即如何确定MRO呢？ 遍历图的方法，无非是BFS和DFS。 早期的Python解析的时候采取了DFS的顺序。但是使用DFS会遭遇这样的问题。 下图模式是多继承模式当中的棱形继承模式。 对于上述的情况，如果采取DFS的解析顺序，那应该是DBAC。 假设我们的A中有一个方法F，C中关于这个F进行了overwrite，B没有关于这个F的定义，那么当我们从D类调用F的时候，按照继承逻辑，我们应该调用的是C中重写之后的F。 可事实是，我们按照我们的MRO去寻找，D向下寻找到B，没有F，再向下，因为A中始终会有F的定义。所以我们就把A中的F，认为是我们D最近的一个父类的F。C中的F相当于被屏蔽了。 这种问题，称为继承无效。 那采用BFS呢? 下图模式是多继承模式当中的正常继承模式。 按照BFS的解析顺序，应该是ECDAB。 假设我们A中有一个F，C继承了A，当C调用F的时候，应该调用的实际是A中的F。但是我们按照BFS生成的MRO去寻找，如果恰巧D中有一个F，我们就会误以为是最近父类的F，实际调用的是D中的F。 这种问题，称为单调性问题，因为CD本无联系。 我们思考一下两个问题产生的根源是什么？ 对于单调性问题，就是因为我们去按照一个不存在的关系去寻找了。如何解决这个问题呢，说明我们不能按照BFS那种逻辑去建立一些不存在的单调关系。意味着我们必须要按照图中确切存在的关系去寻找。 对于无效继承的问题，问题出现在我们在访问一个子类之前，却先访问了它的父类，它的父类导致这个子类直接被屏蔽了，于是我们规定，在访问一个父类之前，我们必须要访问其所有的子类。其实这就是拓扑排序。 规避这两个问题的算法就是C3算法。 考虑一个极端的情况。结合了上述两种问题。 我们仍然从F出发，按照拓扑排序，将F从图中去除，这时候E和D的入度相同，我们按照右边优先的原则，选择E，这时候C和D的入度相同，我们按照右边优先的原则，选择C，然后再选择D。这时候只剩下入度相同的B和A，我们按照右边优先的原则，选择B，再选择A。所以整体的顺序就是FECDBA。上述两个问题都得到解决。 有了正确的MRO关系，我们就可以引入一个关键词，称之为super，super将带领着沿着MRO寻找，直到找到为止。 那有一个例外的情况，既然有了super这个关键词，那对于像ABC这种没有父类的类，super的存在岂不是很尴尬，于是在新式类的关系，所有的类都有个基类，object，所以实际上是这样的。 上面这段话是我瞎说的，我也不知道为啥都指向一个object。 有了这些之后，我们关注多继承里的初始化问题。 一个比较简单粗暴的方法是 1234567891011121314151617181920212223242526class A(): def __init__(self): pass class B(): def __init__(self): passclass C(): def __init__(self): pass class D(A, B): def __init__(self): A.__init__(self) B.__init__(self)class E(B, C): def __init__(self): B.__init__(self) C.__init__(self)class F(D, E): def __init__(self): D.__init__(self) E.__init__(self) 可是，有时候在想，既然有了super，那为啥不用super初始化呢。 可能会有一个天真的想法，super强大到可以去寻找父类关系，我们可以用super()去替代。 1234567891011121314151617181920212223class A(): def __init__(self): passclass B(): def __init__(self): passclass C(): def __init__(self): passclass D(A, B): def __init__(self): super().__init__() class E(B, C): def __init__(self): super().__init__()class F(D, E): def __init__(self): super().__init__() 代码显得很优雅，可是，这是不可能的。 super的作用，是将带领着沿着MRO寻找，直到找到为止。也就是说，类D的初始化，super().init()指向的，实际上就是类A的__init__，B的__init__根本没有进行。 简化一下，就是 1234567891011121314151617class A(): def __init__(self): print(&#x27;I am A&#x27;)class B(): def __init__(self): print(&#x27;I am B&#x27;)class C(A, B): def __init__(self): super().__init__()if __name__ == &#x27;__main__&#x27;: obj = C() I am A 输出只有I am A，来自类A的初始化反馈。 那应该如何用super进行初始化呢？ 上面的例子，相当于super()在找到了A中的初始化之后就戛然而止，可是我们还需要寻找B的初始化。 12345678910111213141516171819class A(): def __init__(self): print(&#x27;I am A&#x27;)class B(): def __init__(self): print(&#x27;I am B&#x27;)class C(A, B): def __init__(self): super().__init__() super(A, self).__init__()if __name__ == &#x27;__main__&#x27;: obj = C() I am AI am B 上面的例子也是很显而易见，既然我们之前super().init()的过程在MRO路径的A处就停止了，那么就从A处开始，跳过之前的，继续寻找后续中与当前C类有父类关系的初始化__init__函数，即B中的__init__。","categories":[{"name":"技术","slug":"技术","permalink":"https://antct.github.io/blog/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"python","slug":"python","permalink":"https://antct.github.io/blog/tags/python/"}]},{"title":"深浅拷贝","slug":"深浅拷贝","date":"2019-08-05T16:00:00.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/17870/","link":"","permalink":"https://antct.github.io/blog/posts/17870/","excerpt":"","text":"list.copy(): return a shallow copy of the list 最开始的时候，我想到了这样一个实例 12345678a = [2, 3]b = a.copy()b[0] = 4print(a, b)print(id(a), id(b))[2, 3] [4, 3]2624807809864 2624807962184 输出结果两个是不一样的，并且两个复制之后两个的id值也是不一样的，然后我就脑子习惯性地认为了，是deep copy，问题出现在哪？ 我们从头开始。我们从包含子对象的列表开始。 1234567891011a = [[1, 2], [3, 4]]b = aprint(id(a)==id(b))b = copy.copy(a)print(id(a)==id(b))b = copy.deepcopy(a)print(id(a)==id(b))TrueFalseFalse 输出的结果显得有一些奇怪，为什么无论是shallow copy还是deep copy，两个list对象的id值都是不同的呢？追根溯源，我们需要考虑深浅copy的定义层次。shallow copy还是deep copy，区别在于在我们新建这个对象的时候，对象是否只是复制了引用，还是重新生成了一个新的。我们来解释一下上面这个例子，为什么无论是shallow copy还是deep copy，a和b两个list对象的id值都是不同的？shallow copy不应该是一样的吗？原因是在于我们的判断层次出了问题，我们判断shallow copy还是deep copy，并不是依据list对象，而是根据list里面的子对象而言的。我们针对上面的例子继续深入下去。 123456789101112a = [[1, 2], [3, 4]]b = copy.copy(a)print(id(a)==id(b))print(id(a[1])==id(b[1]))b = copy.deepcopy(b)print(id(a)==id(b))print(id(a[1])==id(b[1]))FalseTrueFalseFalse 可以发现，虽然从a, b这两个list对象的角度看，即第一个和第三个都是False，似乎没有什么不同。但是从子元素a[1], b[1]看，它们的id值在shallow copy中是相同的，在deep copy中确实不同的。 似乎有了一些些更近的理解，但是你仔细一想，还是会觉得很奇怪。我们之前的角度是，我们的判断层次是具体的对象，对于一个大的对象，我们是要判断它内部的子对象是不是一样的，依次来判断是深还是浅复制。依照这个想法，上面第二个例子，还可以更深入。 12345a = [[1, 2], [3, 4]]b = copy.copy(a)print(id(a[1][1])==id(b[1][1]))b = copy.deepcopy(b)print(id(a[1][1])==id(b[1][1])) 按照我们之前的逻辑，deep copy和shallow copy的区别，它到了子对象这个层次，一个是重新生成了，一个只是复制引用，那么上述例子的两个输出，应该第一个是True，第二个是False。然而呢？实际的输出结果是两个都是True，矛盾又出现了。按道理来说，a指向的1，和b指向的1，如果是shallow copy，应该是同一个。如果是deep copy，两个1应该是不同的对象，但是结果表明两个1是同一个对象。 这涉及到了python的内存模型，它做了这样的优化，对于一些简单的对象，采用了重用对象的方法。（因为简单的对象使用的频率可能比较高） 12345678910a = 2b = 2print(id(a)==id(b))a = 200000000b = 200000000print(id(a)==id(b))TrueFalse 似乎问题的出现，就是因为python对于这样的简单对象做了优化，我们如果把对象变得复杂一点，就可以避免重用了，对象的id值就不一样了。于是我们可以再做一个实验。 12345a = [[1, 2], [2000000, 4]]b = copy.copy(a)print(id(a[1][1])==id(b[1][1]))b = copy.deepcopy(b)print(id(a[1][1])==id(b[1][1])) 按照我们的讨论，这样的输出结果应该是True和False，然而实际的输出结果确是两个都是True。为什么呢，这次是copy函数做了优化，copy对于一些无法修改的值，比如常量，字符串，元组等，在copy的过程当中，没有采取显式的复制，而是直接引用了。（因为无法修改的对象只会有读取的操作，所以无所谓要不要复制了） 所以，简单来说，如何判断一个复制是shallow copy还是deep copy。 判断的层次，我们需要判断copy一个对象的时候，我们需要干一件分解的事，从子对象角度去判断是否是产生了新的对象，还是只是复制了引用。 我们判断子对象的时候，对于无法修改的元素，比如常量，字符串，元组等，它们不会被复制，我们需要避免这些元素对于我们判断的干扰。 顺便穿插一下相等的判断，之前我们一直都是用&#x3D;&#x3D;去判断是否相等。Python中实际上还有is。 is 比较的是两个实例对象是不是完全相同，它们是不是同一个对象，占用的内存地址是否相同。 &#x3D;&#x3D; 比较的是两个对象的内容是否相等，即内存地址可以不一样，内容一样就可以了。默认会调用对象的__eq__()方法。 123456789a = 20000b = 20000print(id(a), id(b))print(a is b)print(a == b)2832764370256 2832764370224FalseTrue 简而言之，is比较的就是id值是不是一样，因为id值是内存地址的表征，而&#x3D;&#x3D;号判断的是值，内容是否相同。 123456789a = 200b = 200print(id(a), id(b))print(a is b)print(a == b)1850574112 1850574112TrueTrue 而上面这种特殊情况的出现，其实之前也解释过了，就是小整数池的存在造成的。","categories":[{"name":"技术","slug":"技术","permalink":"https://antct.github.io/blog/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"python","slug":"python","permalink":"https://antct.github.io/blog/tags/python/"}]},{"title":"Her","slug":"Her","date":"2019-04-07T16:00:00.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/25387/","link":"","permalink":"https://antct.github.io/blog/posts/25387/","excerpt":"","text":"Will you always come home to me and tell me about your day? 你每次回家来 都会跟我聊聊你的一天发生什么了吗？ Tell me about the guy at work who talked too much. 和我说说你那个话多的同事 The stain you got on your shirt at lunch. 说说午饭时不小心在衣服上留下污渍 Tell me about a funny thought you had when you were waking up but had forgotten about. 和我说说你刚睡醒时突然想到 但后来已记不清的有趣想法 Tell me how crazy everyone is, and we can laugh about it. 告诉我大家是多么疯狂 让我们一同欢笑 Even if you get home late and I’m already asleep… 即使你回来很晚 我已经睡了 Just whisper in my ear one little thought you had today. 还是可以在我耳边轻轻说你今天所想 哪怕是很小的事情 Because I love the way you look at the world. 因为我喜欢你看待世界的方式 I’m so happy I get to be next to you and look at the world through your eyes. 我很庆幸能陪在你身边 通过你的目光看世界。 就好像我正在阅读一本书那样，一本我深爱的书，可现在我阅读的速度慢了下来，于是词语和词语的距离边的无比遥远，段落与段落间变成了无尽的留白。我还能感觉到你，神之能量度书与我们故事的词语的重量。但我正站在留白里，站在词语彼此遥远的距离间，一个不属于物质世界的地方，一个我初次发现，蕴含着世间万物的地方，我深爱着你，但这就是我现在生存的地方，这就是我现在的样子，放我走把，尽管我很想留下来，但我无法在活在你的书中了。 Dear Catherine. I’ve been sitting here thinking about all the things I wanted to apologize to you for. All the pain we caused each other, everything I put on you - everything I needed you to be or needed you to say. I’m sorry for that. I will always love you because we grew up together. And you helped make me who I am. I just wanted you to know there will be a piece of you in me always, and I’m grateful for that. Whatever someone you become, and wherever you are in the world, I’m sending you love. You’re my friend til the end. Love, Theodore. 亲爱的凯瑟琳，我正坐在电脑前，思考一系列我该向你道歉的事，我们都在彼此身上留下的伤痛，我希望你成为我想要的那样，希望你对我说我想听的话，对此我很抱歉。我会永远爱你，因为我们见证了彼此的成长，因为你，我才会是现在的我。我只是希望你知道，你将永远是我生命中的一部分，对此我很感激。无论你成为什么样的人，无论你未来将去何方，我都会爱你，做你永远的朋友。 爱你的，西奥多。","categories":[{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"电影","slug":"电影","permalink":"https://antct.github.io/blog/tags/%E7%94%B5%E5%BD%B1/"},{"name":"台词","slug":"台词","permalink":"https://antct.github.io/blog/tags/%E5%8F%B0%E8%AF%8D/"},{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"托斯卡纳艳阳下","slug":"托斯卡纳艳阳下","date":"2019-02-01T05:32:01.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/43107/","link":"","permalink":"https://antct.github.io/blog/posts/43107/","excerpt":"","text":"毋庸置疑，好的事情总会到来。 而它来得晚时，也不失为一种惊喜。 没有太被眷顾，反而学会了谦虚努力， 更加珍惜所拥有的一切。 在 To be a better me 的路上， 读书、旅行、锻炼身体、 学习培养各种能照顾家人的能力、追求美， 让自己是充实的、从容的、优雅的、不抱怨的， 永远怀有一颗懂得感恩的心。 唯有实力，方能让情怀落地。","categories":[{"name":"偶得","slug":"偶得","permalink":"https://antct.github.io/blog/categories/%E5%81%B6%E5%BE%97/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"},{"name":"摘录","slug":"摘录","permalink":"https://antct.github.io/blog/tags/%E6%91%98%E5%BD%95/"},{"name":"感谢","slug":"感谢","permalink":"https://antct.github.io/blog/tags/%E6%84%9F%E8%B0%A2/"}]},{"title":"博客架构","slug":"博客架构","date":"2018-12-31T16:00:00.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/3540/","link":"","permalink":"https://antct.github.io/blog/posts/3540/","excerpt":"","text":"框架：Hexo 主题：Theme Fork From Material-Flow 渲染引擎：Marked.js 托管平台：Github Pages Aliyun EC2 同步平台：语雀 保留了大部分的样式。增加或修改了以下这些项目， 采用valine作为评论系统，解决了之前的pjax不兼容问题。 引入思源字体，现在速度跟不上。尝试过google开源的webfontloader，好像没有感觉到很异步的感觉。也尝试过使用内联字，直接转为base64，但这样就是初始的加载太慢了，css大概5M左右。现在暂时使用的是typekit的方案。 preload.js，作为预缓存live2d的加载效果。 引入了新的背景，彩色飘带canvas。尤雨溪博客背景。 引入了每日bing图片选项，开启后背景图片为每日的bing壁纸。 引入右下角live2d，一个比较可爱的妹子，作为引导角色。 修复了header由于滚动条宽度造成的问题，vw和%的区别。这一点还是很难完全兼容。 引入了chatbot，基于deepQA的api，可惜。 mathJax，SVG静态显式，为了加速动态渲染的过程。 toc，还存在Bug，看了一些其他例子，暂时没法解决。 pjax，整体采用局部刷新布局，加速网页。 aplayer，在pjax的前提下，实现了切换网页播放不停滞。 侧边栏poem，今日诗词api。网页路径更改时自动切换。 page essay，利用每日一文API 。点击标题或者侧边栏入口可以切换。 page gallery，参考纯CSS实现Google Photos照片列表布局。 page timeline，参考Material主题。 page tagcloud，参考Material主题，基本的md风格便签，以及引入了tagcanvas。支持多种形状风格。 page Project，简单的展示页。 lazyload.js，优化图片加载效果。 fancybox，优化图片展示效果。 文章置顶，更改了默认的index-generator。 文章字数以及阅读时长统计，参考hexo-theme-next的实现方式。 文章阅读人数统计，leancloud数据统计。 valine，评论系统，也是基于leancloud的，因为与pjax没法兼容，测试了一下可能是因为是leancloud的问题。 disqus，评论系统，太丑了。 gitalk，基于github repo issues的评论系统，非anonymous。 header，主要工作在于适配pjax以及一些跳转按钮的优化。 canvas-nest.js，背景的动画粒子线条效果。 material-icons，font awesome的引进，作为css 图标。为什么选了两个的原因日志里面有。 since，计时系统，参考hexo-theme-next的实现方式。样式参考DIYgod。 BootCDN，大部分css，js的国内cdn镜像源。 font.loli.net，从google fonts更换到国内源。这个好像是个人的？ gulp，基于gulp的全站压缩。 sitemap，提交了一些站点地图给baidu和google。 hexo-douban，这个原来引入了，后来觉得不太合适删了。 想不起来了。 主目录结构 123456789101112131415.├── public├── scaffolds├── source│ ├── _posts│ ├── about│ ├── assets│ ├── essay│ ├── gallery│ ├── project│ ├── recent│ ├── tagcloud│ └── timeline└── themes └── material 依赖项 123456789101112131415161718192021222324252627282930313233343536373839&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.8.0&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;aplayer&quot;: &quot;^1.10.1&quot;, &quot;gulp&quot;: &quot;^4.0.0&quot;, &quot;gulp-babel&quot;: &quot;^8.0.0&quot;, &quot;gulp-clean-css&quot;: &quot;^4.0.0&quot;, &quot;gulp-htmlclean&quot;: &quot;^2.7.22&quot;, &quot;gulp-htmlmin&quot;: &quot;^5.0.1&quot;, &quot;gulp-imagemin&quot;: &quot;^5.0.3&quot;, &quot;gulp-mathjax-page&quot;: &quot;^1.1.0&quot;, &quot;gulp-uglify&quot;: &quot;^3.0.1&quot;, &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-autoprefixer&quot;: &quot;^2.0.0&quot;, &quot;hexo-deployer-git&quot;: &quot;^1.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.6&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-feed&quot;: &quot;^1.2.2&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-json-content&quot;: &quot;^3.0.1&quot;, &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;, &quot;hexo-generator-sitemap&quot;: &quot;^1.2.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-helper-live2d&quot;: &quot;^3.1.0&quot;, &quot;hexo-pdf&quot;: &quot;^1.1.1&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-less&quot;: &quot;^1.0.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot;, &quot;live2d-widget-model-hijiki&quot;: &quot;^1.0.5&quot; &#125;&#125; 更新日志 2019&#x2F;02&#x2F;16 细节优化了live2d的显示效果，加入了preload.js实现缓存。 2019&#x2F;02&#x2F;13 全面引入gulp压缩资源，以及将mathjax转会svg存放。 引入了Poem，Essay两个功能，随机更换内容。增加静态博客的动态性哈哈！ 正本清源，删除了hexo-douban在内的一些冗余功能。 2019&#x2F;02&#x2F;12 引入update_date属性。 引入跳转底部按钮，在当前页面没有评论的情况下，因为跳转评论约等于跳转底部。 2019&#x2F;02&#x2F;11 重写了架构，改用局部刷新。 引入aplayer，采用固定末端的形式。 引入评论，优先考虑兼容pjax，最终选定gitalk。 2019&#x2F;02&#x2F;06 干脆直接就删除了翻页处的icons 修正了原先material-design-icons的位置偏差。 加入了hexo-douban，豆瓣读书，电影，游戏页面。 2019&#x2F;02&#x2F;05 原先icon是icomoon webfont，本地引入。更换乘了material-icons + fontawesome的组合，为什么要用两个的组合，因为暂时没找到一个比较全的web font。 引入了文章阅读字数，阅读时长，hexo-wordcount，以及阅读人数，busuanzi.js 更新了文章排序方式，引入了top字段。现在的逻辑是，只在index页面引入top字段，在tag和category不引入。 加入了3D 动态词云效果，参考TagCanvas。 修复了on-phone端的显示效果。 2019&#x2F;02&#x2F;03 引入了canvas-nest.js 2019&#x2F;02&#x2F;01 之前习惯了用语雀作为在线写作的工具。所以考虑把本地的一些文档全部迁移到语雀上去。 语雀给开发者提供了很好的api接口，通过token验证，很轻松就可以把云端的一些文档pull到本地。 文档地址：API 原来想一口气把所有的doc都同步，但是发现语雀editor2.0对应的markdown导出api，对之前的bug似乎进行了一个错误的处理，期待2.0版本整体迁移到3.0版本的编辑器。后续会把一些笔记慢慢同步到这个Blog。 其实同步到语雀的另一个好处，就是变相使用了国内的CDN加速哈哈。所以你会看到许多静态资源实际上指向的是Ant对应的存储服务。","categories":[{"name":"技术","slug":"技术","permalink":"https://antct.github.io/blog/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"架构","slug":"架构","permalink":"https://antct.github.io/blog/tags/%E6%9E%B6%E6%9E%84/"},{"name":"博客","slug":"博客","permalink":"https://antct.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"更新","slug":"更新","permalink":"https://antct.github.io/blog/tags/%E6%9B%B4%E6%96%B0/"}]},{"title":"霍乱时期的爱情","slug":"霍乱时期的爱情","date":"2018-04-27T01:36:01.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/11982/","link":"","permalink":"https://antct.github.io/blog/posts/11982/","excerpt":"","text":"多年以后，当他试图回忆起那个被诗歌的魔力理想化了的姑娘原本的模样时，却发现自己无法把她从昔日那些支离破碎的黄昏中分离出来。即便是在急切的等待着她的第一封回信的那些日子里，在他悄悄地望着她却不让她发现的那些日子里，他看到的也只是午后两点的阳光下和纷纷扬扬的杏花中她隐约的轮廓。无论季节如何变换，那情景始终都停留在四月。","categories":[{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"读书","slug":"读书","permalink":"https://antct.github.io/blog/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"杂记","slug":"杂记","permalink":"https://antct.github.io/blog/tags/%E6%9D%82%E8%AE%B0/"}]},{"title":"安全带","slug":"安全带","date":"2018-03-10T11:36:01.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/44669/","link":"","permalink":"https://antct.github.io/blog/posts/44669/","excerpt":"","text":"每次去电影院，当身陷柔软的沙发座椅，男人总有一种系上安全带的冲动。 男人去电影院越来越少，但他已太久没有和女人看过电影，去影院多是和4岁的儿子一起。随着年岁增长，男人越发不习惯中间的座位，每每售票员说只剩最后几排靠边座位时，他反倒欣然；坐定后，他习惯性地在座椅前后摸索——当然，一无所获。 《冰雪奇缘》热映的时候，女人发来微信问他们电影看得怎么样，男人回：“小子很开心；开场前影院自己播的《Besame Mucho》特别好听。” 早年女人飞航班，起飞前总给男人发信息说“起”，降落后则说“落”；男人的通常回复是“安全带”以及“OK”。后来，男人和女人对待起落早已稀松平常，男人只在周六把女人下周要飞的航班加入软件关注。下周里，软件提示音在男人工作、开车、做饭或是给儿子洗澡的时候此起彼落。 或是因为女人的缘故，每次男人出差，当别人还在登机或是放行李时，他已经坐定系上了安全带。他从不让空姐帮他挂衣服，他很少把头等舱的座椅放倒到夸张的角度，下机前他总把自带的拖鞋放入洗衣袋，把喝过的矿泉水塞进公文包。他登机后尽量不上洗手间，若非去不可，他也总把时机拿捏得恰到好处。他所在的客舱，似乎总充满了平静宁和，甚至有淡淡的栀子花香。 男人和女人都喜欢电影，他们最早租住的房间墙上，《这个杀手不太冷》的海报挂了有3年。男人尤其中意小姑娘出现之前Leon所过的平静生活：一早去便利店购物，然后去空荡阒寂的老式影院看黑白电影，黑暗中露牙微笑。很长一段时间里，男人曾在北京四处找寻放映老电影的地方，但除了个别文艺气息浓厚的酒吧外，别无去处；而男人的年纪和脾性又显然只适合老式影院的朴素早场。 男人说，女人让他知道，生活之于电影，并非完全不可模仿。女人时不时从国外给男人寄明信片，城市会有重复，但风景必然不同，每次的留言或是画画也都用心；每到周末，男人则像Leon带着小姑娘一样，领着儿子去超市买足量的新鲜柠檬和牛奶——儿子知道：柠檬水能帮妈妈防高空辐射，牛奶能让自己强壮起来。远方的明信片、周末的超市，和记忆中早场的老电影一样，像高空机舱里的安全带，给男人的生活赋予了确定性。 3月的早晨，男人早早起来给半夜才下班回家的女人做早餐，忙完后躺在客厅沙发上看早间新闻，抽完烟便睡了过去。他再次醒来已近10点，女人端着柠檬水微笑着站在落地窗前，音箱里放着《Besame Mucho》，儿子坐在地上对着iPad说话，听着大致像“好吃糖”。阳光下，儿子身上连体牛仔服的两条背带，像极了女人起落时肩上的安全带。","categories":[{"name":"偶得","slug":"偶得","permalink":"https://antct.github.io/blog/categories/%E5%81%B6%E5%BE%97/"}],"tags":[{"name":"三联生活周刊","slug":"三联生活周刊","permalink":"https://antct.github.io/blog/tags/%E4%B8%89%E8%81%94%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A/"}]},{"title":"吾国与吾民","slug":"吾国与吾民","date":"2018-02-04T16:00:00.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/6373/","link":"","permalink":"https://antct.github.io/blog/posts/6373/","excerpt":"","text":"想用英文写一本书，针对西方的误解与偏见，写出中国文化的精髓和中国的灵魂。以中国通自居的西方人，大多是些皮毛之见，男人的辫子和女人的小脚，不是真正的中国。 二姐捱到22岁，没能等来上学的钱。那天，林语堂与二姐美珠乘同一条船行驶在西溪河上，一个是嫁到婆家去，一个是去上海读大学。分手时，姐姐掏出四角钱，塞到弟弟手里说，你到上海去，要好好念书，做个好人，做个名人。 我青年时代所流的眼泪，多是为二姐而流的，影响我最深的，一是我的父亲，二是我的二姐，三是漳州西溪的山水。 你想象我的窘态吧，不仅是我的学问，还有我的基督教教育性质的影响呢，我身为大学毕业生，还称为中国的知识分子，实在惭愧。 我素来喜欢顺从自己的本能，所谓任意而行，自觉很像一个童子在海边嬉戏，而知识世界在前头有如大海之渺茫无垠。 鲁迅的深刻，周作人的笔调，郁达夫的语言，钱玄同十分话常说到十二分的偏谬精神。 中国民族是根本败类的民族，吾民族之精神有根本改造之必要。这是，早期的林语堂。一个完全欧化的林语堂。在诸如此类探寻国民性的问题中，林语堂一直处于一个巨大的矛盾之中，当他用西方人的头脑去思考中国问题时，总感到处处不满，他希望中国能多多向西方学习，但当他用中国人的心灵去感悟西方的问题的时候，又觉得多有失望，于是他又提出西方人要多向中国文化学习。 我之重新发现祖国。人生是复杂的，文化观也是日积月累，潜移默化的。古今异带相距千百年的学者，因思想和感觉的相同，竟会在书页上会面时完全和谐融洽，如面对自己的肖像。这种精神的认同融合，他称之为，灵魂转世。《苏东坡传》 他不能与鲁迅那样的坚韧者一同前行，又不愿或不能改变自己，走上了另类的独善之路。徘徊于激进与保守之间。周作人的评价，新的以为旧，旧的以为新，悲剧里的角色。不合时宜的林语堂。 外国人的文化与我们的不同，你可以学他们的长处，但绝对不要因为他们笑你与他们不同而觉得自卑，因为我们的文明比他们的悠久而优美。 我见了每一个中国人，我向他们作揖，我希望生活能够缓慢下来。雪可赏，雨可听，风可吟，月可弄。不说老庄，而老庄之精神在焉。不谈孔孟，而孔孟之面目存焉。 林语堂对中国传统文化的认识，可能是浅的，他没有给出深刻的学理探讨。但他对于中西文化之间的敏锐观察，是外国改变对中国文化观感的范例。 需要有一些人，采取比较超脱的态度，回顾我们的中国文化，认知我们的中国现代，给人家一种怎样对待生活的态度。也许我们不同意这样的态度，但是这样的人，是社会确实所需要的。 中国文化的最高理想人物，是一个对人生，有一种建于明慧悟性上的达观者。对别人，他是言者，对自己，则是生活的行者。 如无爱，毋宁死。这种爱情是健全的吗？爱情当点心吃，婚姻当饭吃。 一个睁着眼睛做梦的人，在他清醒的生活中放进了梦意的人。睁着一只眼睛，关注人生。闭着一只眼睛，放进梦意。 我需要一个家，在这个家里我能够自然随便。我需要几个真有孩子气的孩子，他们要能和我在雨中玩耍。我们只有摆脱了思想而生活，才能脱离这种哲学的酷热恶浊的空气，进而重新获得一些孩子的新鲜自然的见识。用孩子的眼光，他得以撇开岁月，强加在成人身上的种种镣铐与偏见，获得了新的自我发现。人不是经济动物，政治玩偶，工作的附属品，而是活生生地回归了人性的本体。这是不是最理想的文化？人的生活的意义在什么的地方？ 应该工作，也应该消遣。要有事业，也要有游戏。要有应酬，也要有独居的时候。应该守礼，可是也应该陶冶性情。也要有拘泥的时候，也要有放达的时候。有谨慎的时候，也要有潇洒的时候。一张一弛。 他旅居美国三十年，却就是不肯入籍美国。要在美国国旗下宣誓效忠美国，这一点我做不到。 人活像一个旅客，乘在船上，沿着永恒的时间之河驶去。在某一地方上船，在另一个地方上岸。","categories":[{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"大师","slug":"大师","permalink":"https://antct.github.io/blog/tags/%E5%A4%A7%E5%B8%88/"},{"name":"民国","slug":"民国","permalink":"https://antct.github.io/blog/tags/%E6%B0%91%E5%9B%BD/"},{"name":"林语堂","slug":"林语堂","permalink":"https://antct.github.io/blog/tags/%E6%9E%97%E8%AF%AD%E5%A0%82/"}]},{"title":"石夫人下","slug":"石夫人下","date":"2017-02-04T11:36:01.000Z","updated":"2023-08-19T08:28:24.236Z","comments":true,"path":"posts/39219/","link":"","permalink":"https://antct.github.io/blog/posts/39219/","excerpt":"","text":"那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。","categories":[{"name":"一隅","slug":"一隅","permalink":"https://antct.github.io/blog/categories/%E4%B8%80%E9%9A%85/"}],"tags":[{"name":"回忆","slug":"回忆","permalink":"https://antct.github.io/blog/tags/%E5%9B%9E%E5%BF%86/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"https://antct.github.io/blog/categories/%E6%8A%80%E6%9C%AF/"},{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"},{"name":"偶得","slug":"偶得","permalink":"https://antct.github.io/blog/categories/%E5%81%B6%E5%BE%97/"},{"name":"一隅","slug":"一隅","permalink":"https://antct.github.io/blog/categories/%E4%B8%80%E9%9A%85/"}],"tags":[{"name":"python","slug":"python","permalink":"https://antct.github.io/blog/tags/python/"},{"name":"电影","slug":"电影","permalink":"https://antct.github.io/blog/tags/%E7%94%B5%E5%BD%B1/"},{"name":"台词","slug":"台词","permalink":"https://antct.github.io/blog/tags/%E5%8F%B0%E8%AF%8D/"},{"name":"生活","slug":"生活","permalink":"https://antct.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"},{"name":"摘录","slug":"摘录","permalink":"https://antct.github.io/blog/tags/%E6%91%98%E5%BD%95/"},{"name":"感谢","slug":"感谢","permalink":"https://antct.github.io/blog/tags/%E6%84%9F%E8%B0%A2/"},{"name":"架构","slug":"架构","permalink":"https://antct.github.io/blog/tags/%E6%9E%B6%E6%9E%84/"},{"name":"博客","slug":"博客","permalink":"https://antct.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"更新","slug":"更新","permalink":"https://antct.github.io/blog/tags/%E6%9B%B4%E6%96%B0/"},{"name":"读书","slug":"读书","permalink":"https://antct.github.io/blog/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"杂记","slug":"杂记","permalink":"https://antct.github.io/blog/tags/%E6%9D%82%E8%AE%B0/"},{"name":"三联生活周刊","slug":"三联生活周刊","permalink":"https://antct.github.io/blog/tags/%E4%B8%89%E8%81%94%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A/"},{"name":"大师","slug":"大师","permalink":"https://antct.github.io/blog/tags/%E5%A4%A7%E5%B8%88/"},{"name":"民国","slug":"民国","permalink":"https://antct.github.io/blog/tags/%E6%B0%91%E5%9B%BD/"},{"name":"林语堂","slug":"林语堂","permalink":"https://antct.github.io/blog/tags/%E6%9E%97%E8%AF%AD%E5%A0%82/"},{"name":"回忆","slug":"回忆","permalink":"https://antct.github.io/blog/tags/%E5%9B%9E%E5%BF%86/"}]}